// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  bio       String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns     Campaign[]
  contributions Contribution[]
  bookings      Booking[]

  @@map("users")
}

model Campaign {
  id            String   @id @default(cuid())
  title         String
  description   String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime
  status        String   @default("active") // active, completed, cancelled
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  artistId      String
  artist        User           @relation(fields: [artistId], references: [id])
  contributions Contribution[]

  @@map("campaigns")
}

model Contribution {
  id               String   @id @default(cuid())
  amount           Float
  contributorName  String
  contributorEmail String
  message          String?
  paymentMethod    String   @default("credit_card")
  createdAt        DateTime @default(now())

  // Relations
  campaignId    String
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  contributorId String?
  contributor   User?    @relation(fields: [contributorId], references: [id])

  @@map("contributions")
}

model Booking {
  id          String   @id @default(cuid())
  date        String
  time        String
  clientName  String
  clientEmail String
  reason      String?
  status      String   @default("pending") // pending, confirmed, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artistId String
  artist   User    @relation(fields: [artistId], references: [id])
  clientId String?

  @@map("bookings")
}

model Availability {
  id        String   @id @default(cuid())
  artistId  String
  date      String
  available Boolean  @default(true)
  slots     String? // JSON string of available time slots
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([artistId, date])
  @@map("availability")
}
